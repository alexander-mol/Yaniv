        # straights
        suit_count = self.get_suit_count()
        possible_straight_suits = []
        for suit in suit_count:
            if suit != 'J':
                if suit_count[suit] + suit_count['J'] >= 3:
                    possible_straight_suits.append(suit)
        for suit in possible_straight_suits:
            suit_set = self.get_set_from_hand(suit=suit)
            suit_set.sort(key=lambda x: x.order)
            joker_set = self.get_set_from_hand(suit='J')
            inner_joker_straight_set = []
            jokers_used = 0
            running_potential_straight = [suit_set[0]]
            for card in suit_set[1:]:
                distance = card.order - running_potential_straight[-1].order
                if distance == 1:
                    running_potential_straight.append(card)
                elif distance == 2 and not jokers_used < len(joker_set):
                    running_potential_straight.append(joker_set[jokers_used])
                    running_potential_straight.append(card)
                    jokers_used += 1
                elif distance == 3 and len(joker_set) - jokers_used == 2:
                    running_potential_straight.append(joker_set[0])
                    running_potential_straight.append(joker_set[1])
                    running_potential_straight.append(card)
                    jokers_used += 2
                else:
                    if running_potential_straight >= 3:
                        inner_joker_straight_set.append(running_potential_straight)
                    running_potential_straight = [card]
                    used_joker = False

            if len(joker_set) == 0:
                running_potential_straight = [suit_set[0]]
                for card in suit_set[1:]:
                    distance = card.order - running_potential_straight[-1].order
                    if distance == 1:
                        running_potential_straight.append(card)
                        # ALSO APPEND SUB STRAIGHTS
                    else:
                        if running_potential_straight >= 3:
                            discarable_sets_list.append(running_potential_straight)
                        running_potential_straight = [card]
            if len(joker_set) == 1:
                inner_joker_straight_set = []
                used_joker = False
                running_potential_straight = [suit_set[0]]
                for card in suit_set[1:]:
                    distance = card.order - running_potential_straight[-1].order
                    if distance == 1:
                        running_potential_straight.append(card)
                    elif distance == 2 and not used_joker:
                        used_joker = True
                        running_potential_straight.append(joker_set[0])
                    else:
                        if running_potential_straight >= 3:
                            inner_joker_straight_set.append(running_potential_straight)
                        running_potential_straight = [card]
                        used_joker = False
                for set in inner_joker_straight_set: